generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
  directUrl         = env("POSTGRES_URL_NON_POOLING")
}

model Post {
  id        String  @id @default(cuid())
  title     String
  content   String?
  published Boolean @default(false)
  authorId  String?
  author    User?   @relation(fields: [authorId], references: [id])
}

model Wishlist {
  id              String           @id @default(cuid())
  name            String
  authorId        String?
  public          Boolean          @default(false)
  genre           String[]
  description     String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  author          User?            @relation(fields: [authorId], references: [id])
  wishlistRecords WishlistRecord[]
}

model WishlistRecord {
  id         String   @id @default(cuid())
  mediaId    String
  mediaType  String
  wishlistId String
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)

  @@unique([wishlistId, mediaId])
}

model WatchedMedia {
  id       String  @id @default(cuid())
  mediaId  String
  authorId String?
  watched  Boolean @default(false)
  author   User?   @relation(fields: [authorId], references: [id])

  @@unique([authorId, mediaId])
}

model Comment {
  id        String   @id @default(cuid())
  mediaId   String
  authorId  String?
  title     String
  content   String?
  tags      String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User?    @relation(fields: [authorId], references: [id])
}

model ChatSession {
  id          String       @id @default(cuid())
  name        String
  authorId    String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  chatRecords ChatRecord[]
  author      User         @relation(fields: [authorId], references: [id])
}

model ChatRecord {
  id            String      @id @default(cuid())
  paragraph     String
  ids           String[]
  fullData      Json[]
  role          String?
  chatSessionId String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  chatSession   ChatSession @relation(fields: [chatSessionId], references: [id], onDelete: Cascade)
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  chatSessions  ChatSession[]
  posts         Post[]
  sessions      Session[]
  wishlists     Wishlist[]
  WatchedMedia  WatchedMedia[]
  Comment       Comment[]
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
